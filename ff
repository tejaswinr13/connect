import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import static org.junit.jupiter.api.Assertions.assertEquals;

class PaymentServiceImplTest {

    private MockWebServer mockWebServer;
    private WebClient webClient;
    private CCMConfig ccmConfig;
    private PaymentServiceImpl paymentService;

    @BeforeEach
    void setUp() {
        mockWebServer = new MockWebServer();
        mockWebServer.start();

        webClient = WebClient.builder().baseUrl(mockWebServer.url("/").toString()).build();
        ccmConfig = new CCMConfig(); // Initialize your CCMConfig as needed
        paymentService = new PaymentServiceImpl(webClient, ccmConfig);
    }

    @AfterEach
    void tearDown() throws Exception {
        mockWebServer.shutdown();
    }

    @Test
    void testGetBalanceSuccess() {
        // Arrange
        String piHash = "yourPiHash";

        // Enqueue a mock response for success
        mockWebServer.enqueue(new MockResponse()
                .setResponseCode(HttpStatus.OK.value())
                .setHeader("Content-Type", MediaType.APPLICATION_JSON_VALUE)
                .setBody("{\"balance\": 100.0}"));

        // Act
        PaymentResponse paymentResponse = paymentService.getBalance(piHash);

        // Assert
        assertEquals(100.0, paymentResponse.getBalance());
    }

    @Test
    void testGetBalanceError() {
        // Arrange
        String piHash = "errorPiHash";

        // Enqueue a mock response for error
        mockWebServer.enqueue(new MockResponse().setResponseCode(HttpStatus.NOT_FOUND.value()));

        // Act and Assert
        assertThrows(HPException.class, () -> paymentService.getBalance(piHash));
    }
}
